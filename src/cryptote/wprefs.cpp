// -*- C++ -*- generated by wxGlade 0.6.3 on Fri Mar 14 21:10:55 2008
// $Id$

#include "wprefs.h"
#include "wcryptote.h"
#include "bmpcat.h"
#include "common/tools.h"

#include <wx/imaglist.h>
#include <wx/config.h>

// begin wxGlade: ::extracode
// end wxGlade

WPreferences::WPreferences(WCryptoTE* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long WXUNUSED(style))
    : wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE),
      wmain(parent)
{
    // begin wxGlade: WPreferences::WPreferences
    notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);
    notebook_pane2 = new wxPanel(notebook, wxID_ANY);
    notebook_pane1 = new wxPanel(notebook, wxID_ANY);
    sizerA4_staticbox = new wxStaticBox(notebook_pane1, -1, _("Automatic Closing"));
    sizerA6_staticbox = new wxStaticBox(notebook_pane1, -1, _("Share Locks"));
    sizerB2_staticbox = new wxStaticBox(notebook_pane2, -1, _("Icon Theme"));
    sizerA2_staticbox = new wxStaticBox(notebook_pane1, -1, _("Backup Files"));
    checkboxBackups = new wxCheckBox(notebook_pane1, myID_CHECK_BACKUPS, _("Keep backups of container during saving."));
    labelBackup1 = new wxStaticText(notebook_pane1, wxID_ANY, _("Number of backups to keep: "));
    spinctrlBackupNum = new wxSpinCtrl(notebook_pane1, wxID_ANY, wxT("5"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 1000);
    checkboxAutoClose = new wxCheckBox(notebook_pane1, myID_CHECK_AUTOCLOSE, _("Automatically save and close loaded containers"));
    labelAutoClose1 = new wxStaticText(notebook_pane1, wxID_ANY, _("after"));
    spinctrlAutoCloseTime = new wxSpinCtrl(notebook_pane1, wxID_ANY, wxT("15"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 10000);
    labelAutoClose2 = new wxStaticText(notebook_pane1, wxID_ANY, _("minutes of inactivity."));
    checkboxAutoCloseExit = new wxCheckBox(notebook_pane1, wxID_ANY, _("Also close CryptoTE after saving the container."));
    checkboxShareLock = new wxCheckBox(notebook_pane1, wxID_ANY, _("Keep exclusive Share-Lock on container file."));
    labelShareLock1 = new wxStaticText(notebook_pane1, wxID_ANY, _("Other users cannot open it while loaded."));
    listctrlTheme = new wxListCtrl(notebook_pane2, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_NO_HEADER|wxLC_SINGLE_SEL|wxSUNKEN_BORDER);
    buttonOK = new wxButton(this, wxID_OK, wxEmptyString);
    buttonCancel = new wxButton(this, wxID_CANCEL, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade

    // *** Change dialog depending on OS ***

#if defined(__WINDOWS__)
    labelShareLock1->SetLabel(_("Windows: No other user or program can open the container file while it is loaded in CryptoTE."));
#elif defined(__LINUX__)
    labelShareLock1->SetLabel(_("Linux: advisory file locking is used.\nNo two instances of CryptoTE can open the same file. Mandatory file locking can only be enabled using a mount option (see man mount, option 'mand')."));
#else
    checkboxShareLock->Disable();
    labelShareLock1->SetLabel(_("Unknown OS: share locking is not supported."));
#endif
    labelShareLock1->Wrap(340);
    Layout();
    GetSizer()->Fit(this);
    Centre();

    // *** Load current settings from WCryptoTE ***

    checkboxBackups->SetValue(wmain->prefs_makebackups);
    spinctrlBackupNum->SetValue(wmain->prefs_backupnum);

    checkboxAutoClose->SetValue(wmain->prefs_autoclose);
    spinctrlAutoCloseTime->SetValue(wmain->prefs_autoclosetime);
    checkboxAutoCloseExit->SetValue(wmain->prefs_autocloseexit);

    checkboxShareLock->SetValue(wmain->prefs_sharelock);

    wxCommandEvent event;
    OnCheckboxBackups(event);
    OnCheckboxAutoClose(event);

    // *** Initialize the Theme List ***

    BitmapCatalog* bitmapcatalog = BitmapCatalog::GetSingleton();

    // first calculate the imagelist's items size

    int maxwidth = 0, maxheight = 0;
    for(int ti = 0; ; ++ti)
    {
	wxString str;
	wxBitmap bmp;

	if (!bitmapcatalog->GetThemeInfo(ti, str, bmp)) break;

	maxwidth = wxMax(maxwidth, bmp.GetWidth());
	maxheight = wxMax(maxheight, bmp.GetHeight());
    }

    wxImageList *imglist = new wxImageList(maxwidth, maxheight);

    listctrlTheme->AssignImageList(imglist, wxIMAGE_LIST_SMALL);
    for(int ti = 0; ; ++ti)
    {
	wxString str;
	wxBitmap bmp;

	if (!bitmapcatalog->GetThemeInfo(ti, str, bmp)) break;

	imglist->Add(bmp);
    }

    listctrlTheme->InsertColumn(0, _("Theme"), wxLIST_FORMAT_LEFT);
    for(int ti = 0; ; ++ti)
    {
	wxString str;
	wxBitmap bmp;

	if (!bitmapcatalog->GetThemeInfo(ti, str, bmp)) break;

	listctrlTheme->InsertItem(ti, str, ti);
    }
    listctrlTheme->SetColumnWidth(0, wxLIST_AUTOSIZE);

    listctrlTheme->SetItemState(bitmapcatalog->GetCurrentTheme(),
				wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED,
				wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
}

void WPreferences::set_properties()
{
    // begin wxGlade: WPreferences::set_properties
    SetTitle(_("CryptoTE Preferences"));
    // end wxGlade
}

void WPreferences::do_layout()
{
    // begin wxGlade: WPreferences::do_layout
    wxBoxSizer* sizer1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer2 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizerB1 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizerB2 = new wxStaticBoxSizer(sizerB2_staticbox, wxVERTICAL);
    wxBoxSizer* sizerA1 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizerA6 = new wxStaticBoxSizer(sizerA6_staticbox, wxVERTICAL);
    wxStaticBoxSizer* sizerA4 = new wxStaticBoxSizer(sizerA4_staticbox, wxVERTICAL);
    wxBoxSizer* sizerA5 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizerA2 = new wxStaticBoxSizer(sizerA2_staticbox, wxVERTICAL);
    wxFlexGridSizer* sizerA3 = new wxFlexGridSizer(2, 2, 0, 0);
    sizerA2->Add(checkboxBackups, 0, wxALL, 4);
    sizerA3->Add(labelBackup1, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 4);
    sizerA3->Add(spinctrlBackupNum, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizerA2->Add(sizerA3, 1, wxEXPAND, 0);
    sizerA1->Add(sizerA2, 0, wxALL|wxEXPAND, 8);
    sizerA4->Add(checkboxAutoClose, 0, wxALL, 4);
    sizerA5->Add(labelAutoClose1, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizerA5->Add(spinctrlAutoCloseTime, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizerA5->Add(labelAutoClose2, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizerA4->Add(sizerA5, 0, wxEXPAND, 0);
    sizerA4->Add(checkboxAutoCloseExit, 0, wxLEFT|wxRIGHT|wxBOTTOM, 4);
    sizerA1->Add(sizerA4, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 8);
    sizerA6->Add(checkboxShareLock, 0, wxALL, 4);
    sizerA6->Add(labelShareLock1, 0, wxLEFT|wxRIGHT|wxBOTTOM, 4);
    sizerA1->Add(sizerA6, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 8);
    sizerA1->Add(0, 0, 1, 0, 0);
    notebook_pane1->SetSizer(sizerA1);
    sizerB2->Add(listctrlTheme, 1, wxALL|wxEXPAND, 4);
    sizerB1->Add(sizerB2, 1, wxALL|wxEXPAND, 8);
    notebook_pane2->SetSizer(sizerB1);
    notebook->AddPage(notebook_pane1, _("Containers"));
    notebook->AddPage(notebook_pane2, _("Icons"));
    sizer1->Add(notebook, 1, wxALL|wxEXPAND, 8);
    sizer2->Add(5, 5, 1, 0, 0);
    sizer2->Add(buttonOK, 0, wxLEFT|wxTOP|wxBOTTOM, 4);
    sizer2->Add(buttonCancel, 0, wxALL, 4);
    sizer1->Add(sizer2, 0, wxEXPAND, 0);
    SetSizer(sizer1);
    sizer1->Fit(this);
    Layout();
    Centre();
    // end wxGlade
}

BEGIN_EVENT_TABLE(WPreferences, wxDialog)
    // begin wxGlade: WPreferences::event_table
    EVT_CHECKBOX(myID_CHECK_BACKUPS, WPreferences::OnCheckboxBackups)
    EVT_CHECKBOX(myID_CHECK_AUTOCLOSE, WPreferences::OnCheckboxAutoClose)
    EVT_BUTTON(wxID_ANY, WPreferences::OnButtonOK)
    // end wxGlade
END_EVENT_TABLE();

void WPreferences::OnCheckboxBackups(wxCommandEvent& WXUNUSED(event))
{
    labelBackup1->Enable( checkboxBackups->GetValue() );
    spinctrlBackupNum->Enable( checkboxBackups->GetValue() );
}

void WPreferences::OnCheckboxAutoClose(wxCommandEvent& WXUNUSED(event))
{
    labelAutoClose1->Enable( checkboxAutoClose->GetValue() );
    spinctrlAutoCloseTime->Enable( checkboxAutoClose->GetValue() );
    labelAutoClose2->Enable( checkboxAutoClose->GetValue() );
    checkboxAutoCloseExit->Enable( checkboxAutoClose->GetValue() );
}

void WPreferences::OnButtonOK(wxCommandEvent& WXUNUSED(event))
{
    wxConfigBase* cfg = wxConfigBase::Get();

    cfg->SetPath(_T("/cryptote"));

    long bitmaptheme = listctrlTheme->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    if (bitmaptheme >= 0) {
	cfg->Write(_T("bitmaptheme"), bitmaptheme);
    }

    cfg->Write(_T("backups"), checkboxBackups->GetValue());
    cfg->Write(_T("backupnum"), spinctrlBackupNum->GetValue());

    cfg->Write(_T("autoclose"), checkboxAutoClose->GetValue());
    cfg->Write(_T("autoclosetime"), spinctrlAutoCloseTime->GetValue());
    cfg->Write(_T("autocloseexit"), checkboxAutoCloseExit->GetValue());

    cfg->Write(_T("sharelock"), checkboxShareLock->GetValue());

    cfg->Flush();

    EndModal(wxID_OK);
}
