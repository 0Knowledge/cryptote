// -*- C++ -*- generated by wxGlade 0.6.2 on Sun Feb 17 10:38:53 2008
// $Id$

#include "ptwquery.h"
#include "tools.h"

#include <algorithm>

// begin wxGlade: ::extracode
// end wxGlade

PTWQuery::PTWQuery(struct PTPassEntry& _passentry, wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long WXUNUSED(style))
    : wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME),
      passentry(_passentry)
{
    // begin wxGlade: PTWQuery::PTWQuery
    sizer2_staticbox = new wxStaticBox(this, -1, _("Enter Password"));
    textctrlDescription = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    textctrlPass = new wxTextCtrl(this, myID_PASSTEXT, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER|wxTE_PASSWORD);
    textctrlCheck = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    textctrlScore = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    labelCorrect = new wxStaticText(this, wxID_ANY, wxEmptyString);
    textctrlCorrect = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    buttonOk = new wxButton(this, wxID_OK, _("&OK"));
    buttonGiveUp = new wxButton(this, myID_GIVEUP, _("&Give Up / Reveal"));

    set_properties();
    do_layout();
    // end wxGlade

    textctrlDescription->SetValue(passentry.description);

    mywrongs = 0;
    myrevealed = 0;
    score = 0.0;
    UpdateScore();

    stopwatch.Start();
}

void PTWQuery::set_properties()
{
    // begin wxGlade: PTWQuery::set_properties
    SetTitle(_("Password Query"));
    textctrlDescription->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    textctrlPass->SetMinSize(wxSize(320, 23));
    textctrlPass->SetFont(wxFont(10, wxMODERN, wxNORMAL, wxNORMAL, 0, wxT("")));
    textctrlPass->SetFocus();
    textctrlCheck->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    textctrlScore->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    textctrlCorrect->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    textctrlCorrect->SetFont(wxFont(10, wxMODERN, wxNORMAL, wxNORMAL, 0, wxT("")));
    textctrlCorrect->Enable(false);
    // end wxGlade
}

void PTWQuery::do_layout()
{
    // begin wxGlade: PTWQuery::do_layout
    wxBoxSizer* sizer1 = new wxBoxSizer(wxVERTICAL);
    wxGridSizer* sizer4 = new wxGridSizer(1, 2, 0, 0);
    wxStaticBoxSizer* sizer2 = new wxStaticBoxSizer(sizer2_staticbox, wxVERTICAL);
    wxFlexGridSizer* sizer3 = new wxFlexGridSizer(5, 2, 0, 0);
    wxStaticText* label1 = new wxStaticText(this, wxID_ANY, _("Description:"));
    sizer3->Add(label1, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlDescription, 0, wxALL|wxEXPAND, 6);
    wxStaticText* label2 = new wxStaticText(this, wxID_ANY, _("Password:"));
    sizer3->Add(label2, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlPass, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 6);
    wxStaticText* label4 = new wxStaticText(this, wxID_ANY, _("Check:"));
    sizer3->Add(label4, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlCheck, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 6);
    wxStaticText* label5 = new wxStaticText(this, wxID_ANY, _("Score:"));
    sizer3->Add(label5, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlScore, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 6);
    sizer3->Add(labelCorrect, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlCorrect, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 6);
    sizer3->AddGrowableCol(1);
    sizer2->Add(sizer3, 1, wxEXPAND, 0);
    sizer1->Add(sizer2, 1, wxALL|wxEXPAND, 8);
    sizer4->Add(buttonOk, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 6);
    sizer4->Add(buttonGiveUp, 0, wxALL, 6);
    sizer1->Add(sizer4, 0, wxEXPAND, 0);
    SetSizer(sizer1);
    sizer1->Fit(this);
    Layout();
    Centre();
    // end wxGlade
}

BEGIN_EVENT_TABLE(PTWQuery, wxDialog)
    // begin wxGlade: PTWQuery::event_table
    EVT_TEXT_ENTER(myID_PASSTEXT, PTWQuery::OnTextPassEnter)
    EVT_TEXT(myID_PASSTEXT, PTWQuery::OnTextPassChange)
    EVT_BUTTON(wxID_OK, PTWQuery::OnButtonOK)
    EVT_BUTTON(myID_GIVEUP, PTWQuery::OnButtonGiveUp)
    // end wxGlade
END_EVENT_TABLE();

void PTWQuery::OnTextPassEnter(wxCommandEvent& event)
{
    OnButtonOK(event);
}

void PTWQuery::OnTextPassChange(wxCommandEvent& WXUNUSED(event))
{
    textctrlCheck->Clear();

    if (myrevealed == 1)
    {
	// Hide revealed password on first keystroke.
	labelCorrect->SetLabel(wxEmptyString);
	textctrlCorrect->SetValue(wxEmptyString);
	textctrlCorrect->Disable();

	buttonGiveUp->Enable();
    }
}

/// Levenshtein string distance algorithm used to show how close the entered
/// password was to the correct one.
unsigned int LevenshteinDistance(const wxString& a, const wxString& b)
{
    // if one of the strings is zero, then all characters of the other must
    // be inserted.
    if (a.empty()) return b.size();
    if (b.empty()) return a.size();

    const unsigned int cost_insert = 1;
    const unsigned int cost_delete = 1;
    const unsigned int cost_replace = 1;

    // make "as" the longer string and "bs" the shorter.
    const wxString &as = (a.size() > b.size()) ? a : b;
    const wxString &bs = (a.size() > b.size()) ? b : a;

    // only allocate two rows of the needed matrix.
    unsigned int matrix[2][as.size() + 1];

    // fill first row with ascending ordinals.
    for(unsigned int i = 0; i < as.size() + 1; i++) {
	matrix[0][i] = i;
    }

    // compute distance
    for(unsigned int j = 1; j < bs.size() + 1; j++)
    {
	// switch rows each time
	unsigned int *lastrow = matrix[(j - 1) % 2];
	unsigned int *thisrow = matrix[j % 2];

	thisrow[0] = j;

	for(unsigned int i = 1; i < as.size() + 1; i++)
	{
	    // three-way mimimum of
	    thisrow[i] = std::min(
		std::min(
		    // left plus insert cost
		    thisrow[i-1] + cost_insert,
		    // top plus delete cost
		    lastrow[i] + cost_delete),
		// top left plus replacement cost
		lastrow[i-1] + ((as[i-1] == bs[j-1]) ? 0 : cost_replace)
		);
	}
    }

    // result is in the last cell of the last computed row
    return matrix[ bs.size() % 2 ][ as.size() ];
}

void PTWQuery::OnButtonOK(wxCommandEvent& WXUNUSED(event))
{
    wxString checkpass = textctrlPass->GetValue();

    if (checkpass == passentry.passtext)
    {
	passentry.rights++;
	passentry.scores.push_back( int(score) );
	passentry.ltime.SetToCurrent();

	passentry.timespent += stopwatch.Time();

	EndModal(wxID_OK);
    }
    else
    {
	wxBell();
	mywrongs++;
	passentry.wrongs++;
	
	score = ( score + score_wrong_add ) * score_wrong_factor;
	UpdateScore();

	if (mywrongs >= 2)
	{
	    unsigned int dist = LevenshteinDistance(checkpass, passentry.passtext);
	    textctrlCheck->SetValue( wxString::Format(_("Incorrect! Hint: %d characters wrong."), dist) );
	}
	else
	{
	    textctrlCheck->SetValue(_("Incorrect! Try again."));
	}

	textctrlPass->SetFocus();
    }
}

void PTWQuery::OnButtonGiveUp(wxCommandEvent& WXUNUSED(event))
{
    myrevealed++;
    passentry.revealed++;

    score = ( score + score_reveal_add ) * score_reveal_factor;
    UpdateScore();

    labelCorrect->Enable();
    textctrlCorrect->Enable();
    labelCorrect->SetLabel(_("Correct:"));
    textctrlCorrect->SetValue(passentry.passtext);
    Layout();

    textctrlPass->SetFocus();

    buttonGiveUp->Disable();
    
    if (myrevealed == 1) {
	textctrlCheck->SetValue(_("Revealed. Read it now, it will be hidden again."));
    }
    else {
	textctrlCheck->SetValue(_("Permanently revealed."));
    }
}

void PTWQuery::UpdateScore()
{
    wxString ss = wxString::Format(_T("%.0f - "), score);

    if (score == 0) {
	ss += _("Perfect until now.");
    }
    else if (score < 10) {
	ss += _("Still good.");
    }
    else if (score < 20) {
	ss += _("Need more repetitions.");
    }
    else if (score < 60) {
	ss += _("You have to work harder.");
    }
    else if (score < 200) {
	ss += _("Are you kidding me? Learn it!");
    }
    else {
	ss += _("You must be doing this on purpose.");
    }

    textctrlScore->SetValue(ss);
}

// wxGlade: add PTWQuery event handlers
