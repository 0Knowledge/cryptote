// -*- C++ -*- generated by wxGlade 0.6.2 on Sun Feb 17 10:38:53 2008
// $Id$

#include "ptwquery.h"

// begin wxGlade: ::extracode
// end wxGlade

PTWQuery::PTWQuery(struct PTPassEntry& _passentry, wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long WXUNUSED(style))
    : wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME),
      passentry(_passentry)
{
    // begin wxGlade: PTWQuery::PTWQuery
    sizer2_staticbox = new wxStaticBox(this, -1, _("Enter Password"));
    textctrlDescription = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    textctrlPass = new wxTextCtrl(this, myID_PASSTEXT, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER|wxTE_PASSWORD);
    textctrlCheck = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    textctrlScore = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    labelCorrect = new wxStaticText(this, wxID_ANY, wxEmptyString);
    textctrlCorrect = new wxTextCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    buttonOk = new wxButton(this, wxID_OK, _("&OK"));
    buttonGiveUp = new wxButton(this, myID_GIVEUP, _("&Give Up / Reveal"));

    set_properties();
    do_layout();
    // end wxGlade

    textctrlDescription->SetValue(passentry.description);
}

void PTWQuery::set_properties()
{
    // begin wxGlade: PTWQuery::set_properties
    SetTitle(_("Password Query"));
    textctrlDescription->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    textctrlPass->SetMinSize(wxSize(320, 23));
    textctrlPass->SetFont(wxFont(10, wxMODERN, wxNORMAL, wxNORMAL, 0, wxT("")));
    textctrlPass->SetFocus();
    textctrlCheck->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    textctrlScore->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    textctrlCorrect->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    textctrlCorrect->SetFont(wxFont(10, wxMODERN, wxNORMAL, wxNORMAL, 0, wxT("")));
    textctrlCorrect->Enable(false);
    // end wxGlade
}

void PTWQuery::do_layout()
{
    // begin wxGlade: PTWQuery::do_layout
    wxBoxSizer* sizer1 = new wxBoxSizer(wxVERTICAL);
    wxGridSizer* sizer4 = new wxGridSizer(1, 2, 0, 0);
    wxStaticBoxSizer* sizer2 = new wxStaticBoxSizer(sizer2_staticbox, wxVERTICAL);
    wxFlexGridSizer* sizer3 = new wxFlexGridSizer(5, 2, 0, 0);
    wxStaticText* label1 = new wxStaticText(this, wxID_ANY, _("Description:"));
    sizer3->Add(label1, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlDescription, 0, wxALL|wxEXPAND, 6);
    wxStaticText* label2 = new wxStaticText(this, wxID_ANY, _("Password:"));
    sizer3->Add(label2, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlPass, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 6);
    wxStaticText* label4 = new wxStaticText(this, wxID_ANY, _("Check:"));
    sizer3->Add(label4, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlCheck, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 6);
    wxStaticText* label5 = new wxStaticText(this, wxID_ANY, _("Score:"));
    sizer3->Add(label5, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlScore, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 6);
    sizer3->Add(labelCorrect, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 6);
    sizer3->Add(textctrlCorrect, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 6);
    sizer3->AddGrowableCol(1);
    sizer2->Add(sizer3, 1, wxEXPAND, 0);
    sizer1->Add(sizer2, 1, wxALL|wxEXPAND, 8);
    sizer4->Add(buttonOk, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 6);
    sizer4->Add(buttonGiveUp, 0, wxALL, 6);
    sizer1->Add(sizer4, 0, wxEXPAND, 0);
    SetSizer(sizer1);
    sizer1->Fit(this);
    Layout();
    Centre();
    // end wxGlade
}

BEGIN_EVENT_TABLE(PTWQuery, wxDialog)
    // begin wxGlade: PTWQuery::event_table
    EVT_TEXT_ENTER(myID_PASSTEXT, PTWQuery::OnTextPassEnter)
    EVT_TEXT(myID_PASSTEXT, PTWQuery::OnTextPassChange)
    EVT_BUTTON(wxID_OK, PTWQuery::OnButtonOK)
    EVT_BUTTON(myID_GIVEUP, PTWQuery::OnButtonGiveUp)
    // end wxGlade
END_EVENT_TABLE();

void PTWQuery::OnTextPassEnter(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (PTWQuery::OnTextPassEnter) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}

void PTWQuery::OnTextPassChange(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (PTWQuery::OnTextPassChange) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}

void PTWQuery::OnButtonOK(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (PTWQuery::OnButtonOK) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}

void PTWQuery::OnButtonGiveUp(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (PTWQuery::OnButtonGiveUp) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}

// wxGlade: add PTWQuery event handlers
